name: Test and Deploy to Firebase Hosting

on:
    push:
        branches:
            - main

jobs:
    test:
        runs-on: ubuntu-latest

        steps:
            - name: Checkout code
              uses: actions/checkout@v3

            - name: Set up Node.js
              uses: actions/setup-node@v3
              with:
                  node-version: '20'
                  cache: 'npm'

            - name: Install dependencies
              working-directory: ./
              run: npm ci --legacy-peer-deps

            - name: Run unit tests
              working-directory: ./
              run: npm test
              env:
                  SKIP_PREFLIGHT_CHECK: true
                  NODE_ENV: test
                  CI: true
                  REACT_APP_FIREBASE_API_KEY: ${{ secrets.REACT_APP_FIREBASE_API_KEY }}
                  REACT_APP_FIREBASE_PROJECT_ID: ${{ secrets.REACT_APP_FIREBASE_PROJECT_ID }}

    test-functions:
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v3

            - name: Setup Node.js
              uses: actions/setup-node@v3
              with:
                  node-version: '20'
                  cache: 'npm'
                  cache-dependency-path: './functions/package-lock.json'

            - name: Install Functions Dependencies
              working-directory: ./functions
              run: npm ci --legacy-peer-deps

            - name: Run Functions Tests
              working-directory: ./functions
              run: npm test
              env:
                  NODE_ENV: test

    build_and_deploy:
        runs-on: ubuntu-latest
        needs: [test, test-functions]
        steps:
            - uses: actions/checkout@v3

            - name: Setup Node.js
              uses: actions/setup-node@v3
              with:
                  node-version: '20'
                  cache: 'npm'

            - name: Install Dependencies
              working-directory: ./
              run: npm ci --legacy-peer-deps

            - name: Build
              working-directory: ./
              run: npm run build
              env:
                  SKIP_PREFLIGHT_CHECK: true
                  REACT_APP_FIREBASE_API_KEY: ${{ secrets.REACT_APP_FIREBASE_API_KEY }}
                  REACT_APP_FIREBASE_AUTH_DOMAIN: ${{ secrets.REACT_APP_FIREBASE_AUTH_DOMAIN }}
                  REACT_APP_FIREBASE_PROJECT_ID: ${{ secrets.REACT_APP_FIREBASE_PROJECT_ID }}
                  REACT_APP_FIREBASE_STORAGE_BUCKET: ${{ secrets.REACT_APP_FIREBASE_STORAGE_BUCKET }}
                  REACT_APP_FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.REACT_APP_FIREBASE_MESSAGING_SENDER_ID }}
                  REACT_APP_FIREBASE_APP_ID: ${{ secrets.REACT_APP_FIREBASE_APP_ID }}
                  REACT_APP_CLAIM_COOLDOWN_SECONDS: ${{ secrets.REACT_APP_CLAIM_COOLDOWN_SECONDS }}
                  REACT_APP_TELEGRAM_BOT_NAME: ${{ secrets.REACT_APP_TELEGRAM_BOT_NAME }}
                  REACT_APP_TELEGRAM_BOT_ID: ${{ secrets.REACT_APP_TELEGRAM_BOT_ID }}

            - name: Deploy to Firebase
              uses: FirebaseExtended/action-hosting-deploy@v0
              with:
                  repoToken: '${{ secrets.GITHUB_TOKEN }}'
                  firebaseServiceAccount: '${{ secrets.FIREBASE_SERVICE_ACCOUNT }}'
                  channelId: live
                  projectId: ${{ secrets.REACT_APP_FIREBASE_PROJECT_ID }}
                  target: coinomi-rewards
              env:
                  FIREBASE_CLI_EXPERIMENTS: webframeworks

    deploy_functions:
        runs-on: ubuntu-latest
        needs: [test, test-functions]
        steps:
            - uses: actions/checkout@v3

            - name: Setup Node.js
              uses: actions/setup-node@v3
              with:
                  node-version: '20'
                  cache: 'npm'

            - name: Install Dependencies
              run: npm ci --legacy-peer-deps

            - name: Install Functions Dependencies
              run: cd functions && npm ci

            - name: Create .env file
              run: |
                  cd functions
                  echo "TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN }}" > .env
                  echo "FUNCTION_URL=${{ secrets.FUNCTION_URL }}" >> .env
                  echo "REACT_APP_CLAIM_COOLDOWN_SECONDS=${{ secrets.REACT_APP_CLAIM_COOLDOWN_SECONDS }}" >> .env
                  echo "REACT_APP_TELEGRAM_BOT_ID=${{ secrets.REACT_APP_TELEGRAM_BOT_ID }}" >> .env
              env:
                  TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
                  FUNCTION_URL: ${{ secrets.FUNCTION_URL }}
                  REACT_APP_CLAIM_COOLDOWN_SECONDS: ${{ secrets.REACT_APP_CLAIM_COOLDOWN_SECONDS }}
                  REACT_APP_TELEGRAM_BOT_ID: ${{ secrets.REACT_APP_TELEGRAM_BOT_ID }}

            - name: Build Functions
              run: |
                  cd functions
                  npm run build
                  ls lib  # Debug step to verify build output
                  cat lib/index.js  # Debug step to verify file contents

            - name: Set up Firebase CLI
              run: |
                  npm install -g firebase-tools
                  firebase --version

            - name: Set up service account
              run: |
                  echo "${{ secrets.FIREBASE_SERVICE_ACCOUNT }}" > service-account.json
                  export GOOGLE_APPLICATION_CREDENTIALS=service-account.json

            - name: Deploy Functions
              run: |
                  firebase deploy --only functions --force --project=${{ secrets.REACT_APP_FIREBASE_PROJECT_ID }}
              env:
                  TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
                  FUNCTION_URL: ${{ secrets.FUNCTION_URL }}
                  REACT_APP_CLAIM_COOLDOWN_SECONDS: ${{ secrets.REACT_APP_CLAIM_COOLDOWN_SECONDS }}
                  REACT_APP_TELEGRAM_BOT_ID: ${{ secrets.REACT_APP_TELEGRAM_BOT_ID }}

    deploy_firestore:
        runs-on: ubuntu-latest
        needs: [test, test-functions, build_and_deploy, deploy_functions]
        steps:
            - uses: actions/checkout@v3

            - name: Deploy Firestore Rules
              uses: w9jds/firebase-action@master
              with:
                  args: deploy --only firestore:rules
              env:
                  GCP_SA_KEY: ${{ secrets.FIREBASE_SERVICE_ACCOUNT }}
                  PROJECT_ID: ${{ secrets.REACT_APP_FIREBASE_PROJECT_ID }}

            - name: Deploy Firestore Indexes
              uses: w9jds/firebase-action@master
              with:
                  args: deploy --only firestore:indexes
              env:
                  GCP_SA_KEY: ${{ secrets.FIREBASE_SERVICE_ACCOUNT }}
                  PROJECT_ID: ${{ secrets.REACT_APP_FIREBASE_PROJECT_ID }}

    set_telegram_webhook:
        runs-on: ubuntu-latest
        needs: [deploy_functions]
        steps:
            - name: Set Telegram Webhook
              run: |
                  echo "Setting up Telegram webhook..."
                  curl -X POST \
                    -H "Content-Type: application/json" \
                    -d '{
                      "url": "${{ secrets.FUNCTION_URL }}/telegramWebhook",
                      "allowed_updates": ["message", "callback_query"],
                      "drop_pending_updates": true
                    }' \
                    "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/setWebhook"
                  echo "Verifying webhook..."
                  response=$(curl -s https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/getWebhookInfo)
                  echo "Webhook Info: $response"
                  if [[ $response != *"\"ok\":true"* ]]; then
                      echo "Failed to set webhook"
                      exit 1
                  fi

              env:
                  TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
                  FUNCTION_URL: ${{ secrets.FUNCTION_URL }}
